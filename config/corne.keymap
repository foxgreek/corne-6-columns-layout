/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        functionkeys {
            bindings = <&mo 5>;
            key-positions = <19 20>;
        };

        option_save {
            bindings = <&kp LC(S)>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mo 7      &kp Q  &lt 8 W  &kp E     &kp R    &kp T        &kp Y    &kp U    &lt 9 I    &kp O    &kp P      &none
&kp LCTRL  &kp A  &kp S    &kp D     &lt 4 F  &kp G        &kp H    &lt 6 J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LSHFT  &kp Z  &kp X    &kp C     &kp V    &kp B        &kp N    &kp M    &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                           &kp LGUI  &mo 1    &kp SPACE    &kp RET  &mo 2    &kp RALT
            >;

            label = "Base";
        };

        symr {
            bindings = <
&none           &none         &kp LS(TAB)  &kp TAB          &none              &none     &none          &kp LS(N7)  &kp EXCLAMATION  &kp LS(MINUS)  &none             &none
&none           &kp DELETE    &none        &kp LC(LS(TAB))  &kp LC(TAB)        &none     &kp BACKSLASH  &kp LS(N8)  &kp LS(N9)       &kp RA(N5)     &kp RA(NUMBER_6)  &kp BACKSPACE
&kp LEFT_SHIFT  &kp LEFT_GUI  &none        &kp LG(GRAVE)    &kp LG(LS(GRAVE))  &none     &kp RA(N7)     &kp RA(N8)  &kp RA(N9)       &none          &kp ESCAPE        &none
                                           &trans           &trans             &trans    &kp LEFT_GUI   &trans      &trans
            >;

            label = "SYM R";
        };

        syml {
            bindings = <
&none  &kp LS(NUMBER_3)  &kp LS(RA(BACKSLASH))  &kp LS(NUMBER_4)  &kp LS(N5)         &kp CARET                &none          &kp LC(LS(F))  &kp LC(ENTER)  &kp RA(ENTER)  &none       &none
&none  &kp LS(NUMBER_2)  &kp GRAVE              &kp LS(GRAVE)     &kp LS(N0)         &kp LS(RIGHT_BRACKET)    &kp LG(SPACE)  &kp TAB        &kp LS(TAB)    &kp LEFT_GUI   &kp LS(F6)  &kp BACKSPACE
&none  &kp LS(RA(N7))    &kp LS(EQUAL)          &kp RA(N)         &kp RIGHT_BRACKET  &kp LS(BACKSLASH)        &none          &none          &none          &none          &none       &none
                                                &trans            &trans             &trans                   &trans         &trans         &trans
            >;

            label = "SYM L";
        };

        number {
            bindings = <
&trans  &trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT     &trans    &trans  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none   &trans
&trans  &kp N1  &kp N2          &kp N3            &kp N4         &kp N5    &kp N6  &kp N7      &kp N8             &kp N9           &kp N0  &kp BACKSPACE
&trans  &trans  &trans          &kp C_BRI_DEC     &kp C_BRI_INC  &trans    &trans  &bt BT_PRV  &bt BT_NXT         &trans           &trans  &trans
                                &trans            &trans         &trans    &trans  &trans      &trans
            >;

            label = "NUM";
        };

        arrows {
            bindings = <
&none  &none       &none  &none  &none  &none    &none  &none           &kp UP_ARROW    &none            &none  &none
&none  &kp DELETE  &none  &none  &none  &none    &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &kp BACKSPACE
&none  &none       &none  &none  &none  &none    &none  &none           &none           &none            &none  &none
                          &none  &none  &none    &none  &none           &none
            >;

            label = "ARROWS";
        };

        FN {
            bindings = <
&none  &kp F1   &kp F2   &kp F2  &kp F4  &kp F5     &none  &none  &none  &none  &none  &none
&none  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &none  &none  &none  &none  &none  &none
&none  &kp F11  &kp F12  &none   &none   &none      &none  &none  &none  &none  &none  &none
                         &none   &none   &none      &none  &none  &none
            >;

            label = "FN";
        };

        german {
            bindings = <
&none           &none      &none          &none    &none             &none    &none  &none  &none  &none  &none          &none
&none           &kp MINUS  &kp SEMICOLON  &kp SQT  &kp LEFT_BRACKET  &none    &none  &none  &none  &none  &kp BACKSPACE  &none
&kp LEFT_SHIFT  &none      &none          &none    &none             &none    &none  &none  &none  &none  &none          &none
                                          &none    &none             &none    &none  &none  &none
            >;

            label = "GERMAN";
        };

        blt {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans      &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans      &trans      &trans  &trans
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;

            label = "BLT";
        };

        word {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none                 &none                 &none                 &none                 &none
&none  &none  &none  &none  &none  &none    &none  &kp LG(RA(NUMBER_1))  &kp LG(RA(NUMBER_2))  &kp LG(RA(NUMBER_3))  &kp LG(RA(NUMBER_4))  &none
&none  &none  &none  &none  &none  &none    &none  &none                 &none                 &none                 &none                 &none
                     &none  &none  &none    &none  &none                 &none
            >;
        };

        screenshot {
            bindings = <
&trans  &trans  &trans          &trans                &trans                    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(LG(N5))  &kp LS(LG(NUMBER_4))  &kp LS(LC(LG(NUMBER_4)))  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans          &trans                &trans                    &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans                &trans                    &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
