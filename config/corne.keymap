/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };

    behaviors {
        tap_or_layer: tap_or_layer {
            compatible = "zmk,behavior-tap-or-layer";
            label = "TAP_OR_LAYER";
            tap = <&kp TAP_CODE>;
            hold = <&mo LAYER_NAME>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P      &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;

            label = "Base";
        };

        symr {
            bindings = <
&none           &none  &none  &kp LG(TAB)    &kp LS(LG(TAB))    &none     &none             &kp LS(N7)  &kp EXCLAMATION  &kp LS(MINUS)  &none             &none
&none           &none  &none  &kp LC(TAB)    &kp LS(LC(TAB))    &none     &kp LS(NUMBER_6)  &kp LS(N8)  &kp LS(N9)       &kp RA(N5)     &kp RA(NUMBER_6)  &none
&kp LEFT_SHIFT  &none  &none  &kp LG(GRAVE)  &kp LG(LS(GRAVE))  &none     &kp RA(N7)        &kp RA(N8)  &kp RA(N9)       &none          &none             &none
                              &trans         &trans             &trans    &trans            &trans      &trans
            >;

            label = "SYM R";
        };

        syml {
            bindings = <
&none  &none             &kp BACKSLASH      &kp LS(NUMBER_4)  &kp CARET          &kp LS(N5)               &none          &none          &none          &none          &none       &none
&none  &kp LS(NUMBER_2)  &kp GRAVE          &kp LS(GRAVE)     &kp LS(N0)         &kp LS(RIGHT_BRACKET)    &kp LG(SPACE)  &kp LC(LS(F))  &kp LC(ENTER)  &kp LA(ENTER)  &kp LS(F6)  &none
&none  &kp LS(RA(N7))    &kp LS(LESS_THAN)  &kp RA(N)         &kp RIGHT_BRACKET  &kp LS(BACKSLASH)        &none          &none          &none          &none          &none       &none
                                            &trans            &trans             &trans                   &trans         &trans         &trans
            >;

            label = "SYM L";
        };

        number {
            bindings = <
&trans  &trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &trans    &trans  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &trans
&trans  &kp N1  &kp N2          &kp N3            &kp N4      &kp N5    &kp N6  &kp N7      &kp N8             &kp N9           &kp N0  &trans
&trans  &trans  &trans          &trans            &trans      &trans    &trans  &trans      &trans             &trans           &trans  &trans
                                &trans            &trans      &trans    &trans  &trans      &trans
            >;

            label = "NUM";
        };

        arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &kp DOWN_ARROW  &trans           &trans  &trans
                        &trans  &trans  &trans    &trans  &trans          &trans
            >;

            label = "ARROWS";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
